from google import genai
import os 

# Initialize the generative model
#model = genai.GenerativeModel('gemini-2.0-flash')
client = genai.Client(api_key=os.environ.get("Gemini_API_Key"))

aspect = input("Enter a product you would like to analyze: ")
def comment_generator(aspect: str):   
    response = client.models.generate_content(
        model="gemini-2.0-flash", contents="Given the product " + aspect + ", generate some comments/reviews about the product. Do not include anything other than the comments."
    )
    return response.text

def createMap(aspect: str):   
    response = client.models.generate_content(
        model="gemini-2.0-flash", contents="From comments " + comment_generator(aspect) + ", a large string of text, grouping the comments with the aspect that they are describing."
        "The string should be formatted as follows: 'aspect: comment1; comment2; comment3; -- aspect2: comment1; comment2; comment3; ...' do not include anything other than the string."
    )
    aspect_array = response.text.split(" -- ")
    aspect_map = {}
    for i in range(len(aspect_array)):
        aspect_map[aspect_array[i].split(": ")[0]] = aspect_array[i].split(": ")[1]
    return aspect_map


#print(comment_generator(aspect))
print(createMap(aspect))
#print(get_llm_output_neg(aspect))

#this week ...
#add another parameter in the function - webscraped contents
#shape prompts to search through the contents for anything pertaining to the inputted product
#return a list of features that are mentioned in the webscraped contents, and map them to the comments that describes them.
#this will be a dictionary with the feature as the key and the comments as the value
#the comments should be one long string - each comment should be separated by a semicolon

#to create map - have llm separate aspect and its comments with a semicolon
#then, have llm separate each aspect/comments section with a colon - will allow for string manipulation to create map (key and value) 
